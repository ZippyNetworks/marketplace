// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/marketplace.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/sonm-io/marketplace/proto"
	reflect "reflect"
)

// MockMarketService is a mock of MarketService interface
type MockMarketService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketServiceMockRecorder
}

// MockMarketServiceMockRecorder is the mock recorder for MockMarketService
type MockMarketServiceMockRecorder struct {
	mock *MockMarketService
}

// NewMockMarketService creates a new mock instance
func NewMockMarketService(ctrl *gomock.Controller) *MockMarketService {
	mock := &MockMarketService{ctrl: ctrl}
	mock.recorder = &MockMarketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketService) EXPECT() *MockMarketServiceMockRecorder {
	return m.recorder
}

// CreateAskOrder mocks base method
func (m *MockMarketService) CreateAskOrder(o proto.Order) error {
	ret := m.ctrl.Call(m, "CreateAskOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAskOrder indicates an expected call of CreateAskOrder
func (mr *MockMarketServiceMockRecorder) CreateAskOrder(o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAskOrder", reflect.TypeOf((*MockMarketService)(nil).CreateAskOrder), o)
}

// CreateBidOrder mocks base method
func (m *MockMarketService) CreateBidOrder(o proto.Order) error {
	ret := m.ctrl.Call(m, "CreateBidOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBidOrder indicates an expected call of CreateBidOrder
func (mr *MockMarketServiceMockRecorder) CreateBidOrder(o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBidOrder", reflect.TypeOf((*MockMarketService)(nil).CreateBidOrder), o)
}

// TouchOrders mocks base method
func (m *MockMarketService) TouchOrders(IDs []string) error {
	ret := m.ctrl.Call(m, "TouchOrders", IDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// TouchOrders indicates an expected call of TouchOrders
func (mr *MockMarketServiceMockRecorder) TouchOrders(IDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TouchOrders", reflect.TypeOf((*MockMarketService)(nil).TouchOrders), IDs)
}

// CancelOrder mocks base method
func (m *MockMarketService) CancelOrder(ID string) error {
	ret := m.ctrl.Call(m, "CancelOrder", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder
func (mr *MockMarketServiceMockRecorder) CancelOrder(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockMarketService)(nil).CancelOrder), ID)
}

// OrderByID mocks base method
func (m *MockMarketService) OrderByID(ID string, result interface{}) error {
	ret := m.ctrl.Call(m, "OrderByID", ID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderByID indicates an expected call of OrderByID
func (mr *MockMarketServiceMockRecorder) OrderByID(ID, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByID", reflect.TypeOf((*MockMarketService)(nil).OrderByID), ID, result)
}

// MatchOrders mocks base method
func (m *MockMarketService) MatchOrders(req *proto.Order, limit uint64, result interface{}) error {
	ret := m.ctrl.Call(m, "MatchOrders", req, limit, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// MatchOrders indicates an expected call of MatchOrders
func (mr *MockMarketServiceMockRecorder) MatchOrders(req, limit, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOrders", reflect.TypeOf((*MockMarketService)(nil).MatchOrders), req, limit, result)
}
